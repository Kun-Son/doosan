  model1_in = Input(shape=(31,81,1), name='pcd')
    conv1 = layers.Conv2D(8, 8)(model1_in)
    batch1 = layers.BatchNormalization()(conv1)
    act1 = layers.Activation(activation='relu')(batch1)
    pool1 = layers.MaxPooling2D((2, 2))(act1)
    conv2 = layers.Conv2D(16, 4, activation='relu')(pool1)
    conv3 = layers.Conv2D(16, 4, activation='relu')(conv2)
    flat1 = layers.Flatten()(conv3)
    model1_out = layers.Dense(64, activation='softmax')(flat1)

    model2_in = Input(shape=(4,), name='joint')

    model_in = layers.concatenate([model1_out, model2_in],axis=-1)
    dense2 = layers.Dense(128)(model_in)
    act2 = layers.Activation(activation='relu')(dense2)
    dense3 = layers.Dense(32)(act2)
    act3 = layers.Activation(activation='relu')(dense3)
    answer = layers.Dense(3)(act3)

    final_model = Model([model1_in, model2_in], answer)

    adam = Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)
    final_model.compile(optimizer =adam, loss='mae', metrics=['mae'])
    print (final_model.summary())

    return final_model